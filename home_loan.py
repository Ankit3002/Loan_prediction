# -*- coding: utf-8 -*-
"""Home_loan.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1_sVEjOEGU_Z8xThsTD8lgHXXqR7GiTuX
"""





## importing important libraries for data preprocessing
import pandas as pd
import numpy as np
import seaborn as sns
import matplotlib.pyplot as plt



# splitting the data into train and test

train = pd.read_csv("/content/drive/MyDrive/home_loan_Data/Train_Loan_Home.csv")
test = pd.read_csv("/content/drive/MyDrive/home_loan_Data/Test_Loan_Home.csv")

train['Dependents'].replace('3+',3,inplace=True)
test['Dependents'].replace('3+',3,inplace=True)
train['Loan_Status'].replace('N', 0,inplace=True)
train['Loan_Status'].replace('Y', 1,inplace=True)

train["Gender"].fillna(train["Gender"].mode()[0],inplace=True)
train["Married"].fillna(train["Married"].mode()[0],inplace=True)
train['Dependents'].fillna(train["Dependents"].mode()[0],inplace=True)
train["Self_Employed"].fillna(train["Self_Employed"].mode()[0],inplace=True)
train["Credit_History"].fillna(train["Credit_History"].mode()[0],inplace=True)




train["Loan_Amount_Term"].fillna(train["Loan_Amount_Term"].mode()[0],inplace=True)

train["LoanAmount"].fillna(train["LoanAmount"].median(),inplace=True)

train.isnull().sum()

test.rename(columns = {'ApplicantIncomeMonthly':'ApplicantIncome' ,'CoapplicantIncomeMonthly':'CoapplicantIncome', 'LoanAmountThousands':'LoanAmount','Loan_Amount_Term_Months':'Loan_Amount_Term'} , inplace = True)

test["Gender"].fillna(test["Gender"].mode()[0],inplace=True)
test['Dependents'].fillna(test["Dependents"].mode()[0],inplace=True)
test["Self_Employed"].fillna(test["Self_Employed"].mode()[0],inplace=True)
test["Loan_Amount_Term"].fillna(test["Loan_Amount_Term"].mode()[0],inplace=True)
test["Credit_History"].fillna(test["Credit_History"].mode()[0],inplace=True)
test["LoanAmount"].fillna(test["LoanAmount"].median(),inplace=True)

train["TotalIncome"]=train["ApplicantIncome"]+train["CoapplicantIncome"]




test["TotalIncome"]=test["ApplicantIncome"]+test["CoapplicantIncome"]



train["EMI"]=train["LoanAmount"]/train["Loan_Amount_Term"]
test["EMI"]=test["LoanAmount"]/test["Loan_Amount_Term"]



train["Balance_Income"] = train["TotalIncome"]-train["EMI"]*1000 # To make the units equal we multiply with 1000
test["Balance_Income"] = test["TotalIncome"]-test["EMI"]

train=train.drop(["ApplicantIncome","CoapplicantIncome","LoanAmount","Loan_Amount_Term"],axis=1)


test = test.drop(["ApplicantIncome","CoapplicantIncome","LoanAmount","Loan_Amount_Term"],axis=1)

## now data preprocessing is done 
## it's time to do model building 
train=train.drop("Loan_ID",axis=1)
test=test.drop("Loan_ID",axis=1)

X=train.drop("Loan_Status",1)
y=train[["Loan_Status"]]
X = pd.get_dummies(X)


train=pd.get_dummies(train)
test=pd.get_dummies(test)

## splitting data for model building
from sklearn.model_selection import train_test_split


x_train,x_cv,y_train,y_cv=train_test_split(X,y,test_size=0.3,random_state=1)


#model building
from sklearn.linear_model import LogisticRegression
from sklearn.metrics import accuracy_score

logistic_model = LogisticRegression(random_state=1)
logistic_model.fit(x_train,y_train)

pred_cv_logistic=logistic_model.predict(x_cv)


score_logistic =accuracy_score(pred_cv_logistic,y_cv)*100 

score_logistic

pred_test_logistic = logistic_model.predict(test)
pred_out = []
for i in pred_test_logistic:
  if(i == 1):
    pred_out.append('Y')
  else:
    pred_out.append('N')

## Decision Tree Model


from sklearn.tree import DecisionTreeClassifier



tree_model = DecisionTreeClassifier(random_state=1)



tree_model.fit(x_train,y_train)

pred_cv_tree=tree_model.predict(x_cv)




score_tree =accuracy_score(pred_cv_tree,y_cv)*100 

score_tree

## predicting the test data.
pred_test_tree = tree_model.predict(test)
pred_des_out = []
for i in pred_test_tree:
  if(i == 1):
    pred_des_out.append('Y')
  else:
    pred_des_out.append('N')

## Random forest Model
from sklearn.ensemble import RandomForestClassifier
forest_model = RandomForestClassifier(random_state=1,max_depth=10,n_estimators=50)


forest_model.fit(x_train,y_train)


pred_cv_forest=forest_model.predict(x_cv)



score_forest = accuracy_score(pred_cv_forest,y_cv)*100


score_forest

